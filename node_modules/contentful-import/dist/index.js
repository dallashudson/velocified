'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = runContentfulImport;

var _collection = require('lodash/collection');

var _createClients = require('contentful-batch-libs/dist/utils/create-clients');

var _createClients2 = _interopRequireDefault(_createClients);

var _pushToSpace = require('contentful-batch-libs/dist/push/push-to-space');

var _pushToSpace2 = _interopRequireDefault(_pushToSpace);

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _transformSpace = require('contentful-batch-libs/dist/transform/transform-space');

var _transformSpace2 = _interopRequireDefault(_transformSpace);

var _getTransformedDestinationResponse = require('./get-transformed-destination-response');

var _getTransformedDestinationResponse2 = _interopRequireDefault(_getTransformedDestinationResponse);

var _npmlog = require('npmlog');

var _npmlog2 = _interopRequireDefault(_npmlog);

var _lodash = require('lodash');

var _cliTable = require('cli-table2');

var _cliTable2 = _interopRequireDefault(_cliTable);

var _moment = require('moment');

var _moment2 = _interopRequireDefault(_moment);

var _parseOptions = require('./parseOptions');

var _parseOptions2 = _interopRequireDefault(_parseOptions);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var summary = {};

function runContentfulImport(params) {
  summary.startTime = (0, _moment2.default)();

  var options = (0, _parseOptions2.default)(params);

  var clients = (0, _createClients2.default)(options);
  return _bluebird2.default.props({
    source: options.content,
    destination: (0, _getTransformedDestinationResponse2.default)({
      managementClient: clients.destination.management,
      spaceId: clients.destination.spaceId,
      sourceResponse: options.content,
      contentModelOnly: options.contentModelOnly,
      skipLocales: options.skipLocales,
      skipContentModel: options.skipContentModel
    })
  }).then(function (responses) {
    return _bluebird2.default.props({
      source: (0, _transformSpace2.default)(responses.source, responses.destination),
      destination: responses.destination
    });
  }).then(function (responses) {
    responses.source.deletedContentTypes = (0, _collection.filter)(responses.destination.contentTypes, function (contentType) {
      return !(0, _collection.find)(responses.source.contentTypes, { original: { sys: { id: contentType.sys.id } } });
    });
    responses.source.deletedLocales = (0, _collection.filter)(responses.destination.locales, function (locale) {
      return !(0, _collection.find)(responses.source.locales, { original: { code: locale.code } });
    });
    return responses;
  })
  // push source space content to destination space
  .then(function (responses) {
    return (0, _pushToSpace2.default)({
      sourceContent: responses.source,
      destinationContent: responses.destination,
      managementClient: clients.destination.management,
      spaceId: clients.destination.spaceId,
      prePublishDelay: options.prePublishDelay,
      assetProcessDelay: options.assetProcessDelay,
      contentModelOnly: options.contentModelOnly,
      skipLocales: options.skipLocales,
      skipContentModel: options.skipContentModel,
      skipContentPublishing: options.skipContentPublishing
    });
  }).then(function (response) {
    _npmlog2.default.info('import', 'Finished importing all data');

    var infoTable = new _cliTable2.default();

    infoTable.push([{ colSpan: 2, content: 'The following entities were imported' }]);

    Object.keys(options.content).forEach(function (type) {
      if (options.skipLocales && type === 'locales') {
        return;
      }

      if (options.skipContentModel && type === 'contentTypes') {
        return;
      }

      if (options.contentModelOnly && !['contentTypes', 'locales'].includes(type)) {
        return;
      }

      infoTable.push([(0, _lodash.startCase)(type), options.content[type].length]);
    });

    console.log(infoTable.toString());

    var durationHuman = summary.startTime.fromNow(true);
    var durationSeconds = (0, _moment2.default)().diff(summary.startTime, 'seconds');

    _npmlog2.default.info('import', `The import took ${durationHuman} (${durationSeconds}s)`);

    return response;
  }).catch(function (err) {
    _npmlog2.default.error('import', err);
    throw err;
  });
}
module.exports = exports['default'];